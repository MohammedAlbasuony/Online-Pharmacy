@using Pharmacy.BLL.ViewModels
@model OrderViewModel

@{
    ViewData["Title"] = "Order Confirmation";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<div class="container py-5">
    <div class="text-center mb-4">
        <h2 class="display-6 text-success">
            <i class="bi bi-check-circle-fill"></i> Order Confirmation
        </h2>

        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success mt-3">
                @TempData["Success"]
            </div>
        }
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0"><i class="bi bi-receipt"></i> Order Summary</h5>
        </div>
        <div class="card-body">
            <p><strong>Order ID:</strong> @Model.Order.OrderID</p>
            <p><strong>Order Date:</strong> @Model.Order.OrderDate.ToString("f")</p>
            <p><strong>Total Price:</strong> @Model.Order.TotalPrice.ToString("C")</p>
            <p>
                <strong>Status:</strong>
                @{
                    var status = Model.Order.Status?.ToLower();
                    string badgeClass = status switch
                    {
                        "paid" => "bg-success",
                        "pending" => "bg-warning text-dark",
                        "cancelled" => "bg-danger",
                        _ => "bg-secondary"
                    };

                    string statusIcon = status switch
                    {
                        "paid" => "bi bi-check-circle-fill",
                        "pending" => "bi bi-hourglass-split",
                        "cancelled" => "bi bi-x-circle-fill",
                        _ => "bi bi-question-circle-fill"
                    };
                }
                <span class="badge @badgeClass text-uppercase px-3 py-2 rounded-pill shadow-sm d-inline-flex align-items-center gap-2">
                    <i class="@statusIcon"></i> @Model.Order.Status
                </span>
            </p>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header bg-light">
            <h5 class="mb-0"><i class="bi bi-bag-fill"></i> Ordered Items</h5>
        </div>
        <div class="card-body p-0">
            <table class="table table-hover m-0">
                <thead class="table-secondary">
                    <tr>
                        <th>Medication</th>
                        <th>Quantity</th>
                        <th>Unit Price</th>
                        <th>Total Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.OrderItems)
                    {
                        <tr>
                            <td>@item.MedicationName</td>
                            <td>@item.Quantity</td>
                            <td>@item.UnitPrice.ToString("C")</td>
                            <td>@(item.Quantity * item.UnitPrice).ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="text-center mt-4">
        <a href="@Url.Action("Index", "Cart")" class="btn btn-outline-primary me-2">
            <i class="bi bi-arrow-left-circle"></i> Back to Cart
        </a>

        @if (!string.Equals(Model.Order.Status, "Paid", StringComparison.OrdinalIgnoreCase))
        {
            <a href="@Url.Action("ConfirmAndPay", "Order")" class="btn btn-success">
                <i class="bi bi-credit-card-fill"></i> Confirm and Pay
            </a>
        }
    </div>
</div>
